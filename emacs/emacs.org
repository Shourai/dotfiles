#+AUTHOR: Shourai
#+TITLE: Emacs Configuration File

This configuration is now using [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.  The configuration is hugely
inspired by [[https://github.com/howardabrams/dot-files/blob/master/emacs.org][Howard Abrams]] & [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel Mai]] a big thank you to them. \\
An essential read on literative programming would be this [[http://howardism.org/Technical/Emacs/literate-programming-tutorial.html][tutorial]] by Howard
Abrams.

* Installing Emacs

  On macOS, using [[http://brew.sh/][homebrew]] is an easy way to install emacs.

Note:
Emacs does not support ImageMagick 7:
Reported on 2017-03-04: https://debbugs.gnu.org/cgi/bugreport.cgi?bug=25967

   #+begin_src sh
   brew cask install emacs
   #+end_src

   This installs the latest of Emacs from =https://emacsformacosx.com/= in =/usr/local/bin/emacs=.
   Details in the following [[https://github.com/Homebrew/homebrew-core/pull/36070][pull request]] why `--with-cocoa` was removed.

** Loading this File

   To "load" the contents of this file, add the following to =$HOME/.emacs.d/init.el=:

   #+BEGIN_SRC emacs-lisp :tangle no
      (org-babel-load-file "~/.emacs.d/emacs.org")
   #+END_SRC

   It will automatically generate an =emacs.el= file and subsequently load it in.

* General Settings

** Customization Section

   While I would rather program my configurations, sometimes the Emacs
   menu system is "good enough", but I want it in its own file:

   #+BEGIN_SRC emacs-lisp :tangle no
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

   While this ought to work, I found that you need to put this in the `init.el`
   file instead.

    #+BEGIN_SRC emacs-lisp
    #+END_SRC
** Setting up the Load Path

   Extra packages not available via the package manager go in my
   personal stash at: =$HOME/.emacs.d/elisp=

   #+BEGIN_SRC emacs-lisp :tangle no
     (add-to-list 'load-path (user-emacs-directory "elisp"))
   #+END_SRC

** Personal Information

   I also want to load some custom variables which I don't want to share publicly.
   #+BEGIN_SRC emacs-lisp
(if (file-exists-p "~/.custom_variables")
    (load-file "~/.custom_variables")
    (message "Custom variable file not found"))
      (setq user-full-name "Shourai"
      user-mail-address "mail@shourai.net")
   #+END_SRC

* Better Defaults

#+BEGIN_SRC emacs-lisp
  (setq
   cursor-in-non-selected-windows t                     ; Hide the cursor in inactive windows
   fill-column 80                                       ; Set width for automatic line breaks
   help-window-select t                                 ; Focus new help windows when opened
   inhibit-startup-screen t                             ; Disable start-up screen
   initial-scratch-message nil                          ; Empty the initial *scratch* buffer
   load-prefer-newer t                                  ; Prefers the newest version of a file
   select-enable-clipboard t                            ; Merge system's and Emacs' clipboard
   inhibit-startup-screen t                             ; Disable start-up screen
   display-time-24hr-format  t                          ; Display time in 24 hour format
   display-time-day-and-date t                          ; Display date
   display-time-format " %H:%M | %a %d %B"              ; Format the time string
   display-time-default-load-average nil                ; Don't display load average
   vc-follow-symlinks t                                 ; Always follow the symlinks
   ring-bell-function 'ignore                           ; Disable audio notifications
   mode-require-final-newline t                         ; Put newline at the end of file when saving
   view-read-only t)                                    ; Always open read-only buffers in view-mode
  (setq-default
   indent-tabs-mode nil                                 ; Use spaces to indent instead of tabs
   tab-width 4                                          ; Set width for tabs
   dired-listing-switches "-alh")                       ;Add file sizes in human-readable units (KB, MB, etc) to dired buffers.
  (cd "~/")                                             ; Move to the user directory
  (column-number-mode 1)                                ; Show the column number
  (display-time-mode 1)                                 ; Enable time in the mode-line
  (fset 'yes-or-no-p 'y-or-n-p)                         ; Replace yes/no prompts with y/n
  (global-hl-line-mode)                                 ; Hightlight current line
  (set-default-coding-systems 'utf-8)                   ; Default to utf-8 encoding
  (display-time-mode t)                                 ; Enable time in the mode-line
#+END_SRC


Save file when the frame loses focus.
These hooks fire when any Emacs frame gains or loses focus. \\
This means that if you Alt-Tab or Alt-` between Emacs frames, the focus-out-hook and
focus-in-hook will run. \\
I think this also causes auto-save to not work anymore (i.e. no more foo# files)

#+BEGIN_SRC emacs-lisp
  (defun save-all ()
  (interactive)
  (save-some-buffers t))
  (add-hook 'focus-out-hook 'save-all)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)  ; Remove trailing whitespaces when saving
#+END_SRC

Tidy up the backup and auto-save files created by emacs.
They are neatly tucked away in a folder.
The auto-saves directory is not automatically created so we have to do it explicitly.

#+BEGIN_SRC emacs-lisp
    (unless (file-exists-p "~/.tmp/emacs/auto-saves/")
    (make-directory "~/.tmp/emacs/auto-saves/" t))

  (setq
      backup-directory-alist
          '(("." . "~/.tmp/emacs/backups/"))    ; don't litter my fs tree
      auto-save-file-name-transforms
          `((".*" , "~/.tmp/emacs/auto-saves/" t)))

  (setq
      backup-by-copying t      ; don't clobber symlinks
      delete-old-versions t    ; don't ask about deleting old versions
      kept-new-versions 10     ; keep 10 latest versions
      kept-old-versions 2      ; keep 2 old versions
      version-control t)       ; use versioned backups
#+END_SRC

* Package Initialization
** Package Sources

    #+BEGIN_SRC emacs-lisp
      (setq package-archives '(("gnu"       . "https://elpa.gnu.org/packages/")
                               ("melpa"     . "https://melpa.org/packages/")
                               ("org"       . "https://orgmode.org/elpa/")))
    #+END_SRC

** Use-Package
   Using [[https://github.com/jwiegley/use-package][use-package]] to automatically install certain packages, as
   well as the ease of lazily loading them.

   #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))
   #+END_SRC

* Visual settings

  I like a minimal setup when working on code, therefore I disable the toolbar and scroll bar. \\
  In daemon mode `scroll-bar-mode -1` does not work, therefore I have a workaround. \\
  Also set the font.

  #+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (blink-cursor-mode -1)
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark)) ;; assuming you are using a dark theme
    (setq ns-use-proxy-icon nil ;; Remove icon in the titlebar
          frame-title-format nil) ;; Remove filename in the titlebar
    (setq default-frame-alist '((font . "Jetbrains Mono 10")))

    ; Disable scroll bars when using emacsclient
    (defun my/disable-scroll-bars (frame)
    (modify-frame-parameters frame
                            '((vertical-scroll-bars . nil)
                                (horizontal-scroll-bars . nil))))
    (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

  #+END_SRC


** Which key
   [[https://github.com/justbur/emacs-which-key][Which key]] allows for a contextualized completion of emacs commands
max
   shown in the mini-buffer. \\
   It's really helpful if you can't remember the next keypress.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
	:ensure t
	:defer 5
	:delight
        :custom (which-key-idle-delay 0.5)
	:config
	(which-key-mode))
   #+END_SRC

** Line numbering
   From emacs 26+, emacs has a builtin line numbering.
   #+BEGIN_SRC emacs-lisp
     (setq display-line-numbers-type 'visual)
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
     (add-hook 'text-mode-hook 'display-line-numbers-mode)
   #+END_SRC

** Theme
[[https://github.com/hlissner/emacs-doom-themes][Doom theme]] \\
Using [[https://github.com/seagle0128/doom-modeline][Doom modeline]] as it is quite minimalistic plus a lot faster than spaceline.
    #+BEGIN_SRC emacs-lisp
        (use-package doom-themes
        :ensure t
        :init
        :config
        (load-theme 'doom-one t))

      (use-package doom-modeline
          :ensure t
          :defer t
          :hook (after-init . doom-modeline-init)
          :custom (doom-modeline-height 18))
          ;:custom-face (mode-line ((t (:height 1.0))))
    #+END_SRC


Highlight text that crosses over the 80 column mark in whitespace mode.
It does not automatically fill the line but only gives a visual indication.
    #+BEGIN_SRC emacs-lisp :tangle no
    (setq-default
    whitespace-line-column 80
    whitespace-style       '(face lines-tail trailing empty))
    ; (add-hook 'LaTeX-mode-hook 'whitespace-mode) ; not working?
    #+END_SRC

** Rainbow delimiter
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
    :ensure t
    :config
    :hook ((prog-mode text-mode) . rainbow-delimiters-mode))
  #+END_SRC

** Delight
   [[https://www.emacswiki.org/emacs/DelightedModes][Delight]] enables you to easily customise how major and minor modes appear in the ModeLine.
   Usepackage supports :delight
  #+BEGIN_SRC emacs-lisp
    (use-package delight
    :ensure t
    :defer t)
  #+END_SRC

* Loading and Finding Files
** Helm
   [[https://tuhdo.github.io/helm-intro.html][Helm information]]
   Emacs incremental completion and selection narrowing framework.
   #+BEGIN_SRC emacs-lisp
     (use-package helm
     :ensure t
     :defer t
     :delight
     :bind (("M-x" . helm-M-x)
            ("C-x C-b" . helm-mini)
            ("C-x C-f" . helm-find-files)
            ("M-y" . helm-show-kill-ring)
            ("C-c h" . helm-command-prefix)
            :map helm-command-map  ;; using prefix C-c h-...
            ("o" . helm-occur)
            :map helm-map
            ("<tab>" . helm-execute-persistent-action) ; rebind tab to run persistent action
            ("TAB" . helm-execute-persistent-action) ; rebind tab to run persistent action
            ("C-z" . helm-select-action))
     :config
     (require 'helm-config)
     (helm-mode 1)
     (setq helm-mode-fuzzy-match                 t    ;; globally enable fuzzy matching for helm-mode
           helm-completion-in-region-fuzzy-match t
           helm-quick-update                     t))
   #+END_SRC

  `helm-ag.el` provides interfaces of [[https://github.com/ggreer/the_silver_searcher][The Silver Searcher]] with helm.
   #+BEGIN_SRC emacs-lisp
     (use-package helm-ag
       :ensure t
       :defer t)
   #+END_SRC

Helm interface for company-mode
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package helm-company
      :ensure t
      :after (company)
      :defer t)
    #+END_SRC

** Projectile
   [[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. \\
   Helm-projectile adds helm integration to projectile.

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
     :ensure t
     :defer t
     :delight '(:eval (concat " " (projectile-project-name)))
     :bind (("C-c p h" . helm-projectile)
            ("C-c p p" . helm-projectile-switch-project)
            ("C-c p f" . helm-projectile-find-file)
            ("C-c p F" . helm-projectile-find-file-in-known-projects)
            ("C-c p g" . helm-projectile-find-file-dwim)
            ("C-c p d" . helm-projectile-find-dir)
            ("C-c p e" . helm-projectile-recentf)
            ("C-c p a" . helm-projectile-find-other-file)
            ("C-c p i" . helm-projectile-invalidate-cache)
            ("C-c p z" . helm-projectile-cache-current-file)
            ("C-c p b" . helm-projectile-switch-to-buffer)
            ("C-c p s g" . helm-projectile-grep)
            ("C-c p s a" . helm-projectile-ack)
            ("C-c p s s" . helm-projectile-ag))
     :config (projectile-mode 1))

     (use-package helm-projectile
     :ensure t
     :after (projectile)
     :config)
   #+END_SRC

* Autocompletion
** Snippets
   A template system for Emacs.
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
     :ensure t
     :delight yas-minor-mode
     :hook ((LaTeX-mode . yas-minor-mode)
            (python-mode . yas-minor-mode))
     :config
     (yas-reload-all))
   #+END_SRC

** Company Mode
   Modular in-buffer completion framework for Emacs.
   #+BEGIN_SRC emacs-lisp
      (use-package company
      :ensure t
      :delight
      :defer 2
      :bind (("C-," . company-complete-common)
             ("C-c y" . company-yasnippet)
            :map company-active-map
                 ("M-n" . nil)
                 ("M-p" . nil)
                 ("C-n" . #'company-select-next)
                 ("C-p" . #'company-select-previous))
      :init
      :config
     ; Don't override company-active-map keybindings with evil keybindings
     (add-to-list 'evil-intercept-maps '(company-active-map . nil))
     (add-to-list 'evil-overriding-maps '(company-active-map . nil))
      (global-company-mode 1)
      (setq company-idle-delay  0.0 ; company delay until suggestions are shown
        company-minimum-prefix-length 2
        company-show-numbers t
        company-tooltip-align-annotations t))

    (use-package company-box
    :ensure t
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
   #+END_SRC

   Add quickhelp for company mode
   #+BEGIN_SRC emacs-lisp
     (use-package company-quickhelp
     :ensure t
     :after (company)
     :config
     (company-quickhelp-mode 1))
   #+END_SRC

** Smartparens
   Minor mode for Emacs that deals with parens pairs and tries to be smart about it.
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
     :ensure t
     :defer 2
     :delight
     :hook (((prog-mode text-mode) . smartparens-mode)
	   ((prog-mode text-mode) . show-smartparens-mode))
     :init
     :config
     (require 'smartparens-config)
     (sp-use-smartparens-bindings)
     (setq sp-show-pair-delay 0
           sp-show-pair-from-inside t)
     (set-face-attribute 'sp-show-pair-match-face nil
                         :foreground "#ff6c6b" :underline "white"))
   #+END_SRC

   Load after smartparens-strict-mode
   #+BEGIN_SRC emacs-lisp
     (use-package evil-smartparens
     :ensure t
     :after (smartparens)
     :delight
     :hook (smartparens-enabled . evil-smartparens-mode)
     :config
     :init)
   #+END_SRC

* Spell-checking
While typing text I like to activate `flyspell mode` which checks my spelling on
the fly. My preferred spelling is `english`. \\
The dictionaries have to be installed via `brew install aspell`.

    #+BEGIN_SRC emacs-lisp
        (setq ispell-dictionary "english")
    #+END_SRC

* Evil mode
  Evil is an extensible vi layer for Emacs. \\
  It provides Vim features like Visual selection and text objects.
  #+BEGIN_SRC emacs-lisp
    (use-package evil
    :ensure t
    :defer t ;; only works if evil-mode lies in ~:config~
    :bind (("C-z" . turn-on-evil-mode)
           ("C-x C-z" . turn-off-evil-mode)
           :map evil-normal-state-map
           ("{" . evil-next-buffer)
           ("}" . evil-prev-buffer))
    :init
    (setq evil-want-integration t ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-fu) ;; Needed to undo-redo
    ;; (setq evil-want-C-u-scroll t) ;; This does not play nicely when having to use `C-u M-x` commands
    :config
    (evil-mode t))
  #+END_SRC

In emacs version <28, evil supports undo-tree and undo-fu. These packages need to be installed seperately.

    #+BEGIN_SRC emacs-lisp
      (use-package undo-fu
      :ensure t)
    #+END_SRC

    This is a collection of Evil bindings for the parts of Emacs that Evil does not
    cover properly by default, such as help-mode, M-x calendar, Eshell and more.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-collection
      :after evil
      :ensure t
      :init
      (evil-collection-init 'dired)
      :config)
    #+END_SRC

** Custom Keybindings
  Increment and decrement numbers in Emacs.
  #+BEGIN_SRC emacs-lisp
    (use-package evil-numbers
    :ensure t
    :defer t
    :bind ("C-=" . evil-numbers/inc-at-pt)
          ("C--" . evil-numbers/dec-at-pt))
  #+END_SRC

** Surround
This package emulates [[https://github.com/tpope/vim-surround][surround.vim by Tim Pope]]. The functionality is wrapped into a minor mode.
  #+BEGIN_SRC emacs-lisp
    (use-package evil-surround
    :ensure t
    :defer 2
    :config
    (global-evil-surround-mode 1))
  #+END_SRC


** Replace with register
  Port of [[http://www.vim.org/scripts/script.php?script_id=2703][Replace With Register]].
  #+BEGIN_SRC emacs-lisp
    (use-package evil-replace-with-register
    :ensure t
    :defer 2
    ;:bind (("gR" . evil-replace-with-register))
    :config
    (setq evil-replace-with-register-key (kbd "gr"))
    (evil-replace-with-register-install))
  #+END_SRC

* Movement and Search
** Avy
   Avy is a GNU Emacs package for jumping to visible text using a char-based decision tree. \\
   See for more information [[https://github.com/abo-abo/avy][abo-abo]]'s github.

   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :defer t
       :bind
        (("C-;"  . avy-goto-char)
        ("C-:"   . avy-goto-char-timer)
        ("M-g f" . avy-goto-line)
        ("M-g w" . avy-goto-word-1)
        ("M-g e" . avy-goto-word-0)))
   #+END_SRC

** Expand region
   Expand region increases the selected region by semantic units.

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :defer t
       :bind ("C-+" . er/expand-region))
   #+END_SRC

** Anzu
   Anzu provides a minor mode which displays current match and total matches
   information in the mode-line in various search modes.

   #+BEGIN_SRC emacs-lisp
     (use-package anzu
       :ensure t
       :defer t
       :custom (anzu-cons-mode-line-p nil))
   #+END_SRC

** Ag

   #+BEGIN_SRC emacs-lisp
     (use-package ag
       :ensure t
       :defer t
       :commands ag
       :custom (ag-highlight-search t))
   #+END_SRC

* Latex
We will be using AUCTeX as our Emacs TeX environment, together with yasnippets it
works as well as any dedicated LaTeX program.

When a latex file is loaded, let it load visual-line, flyspell, math-mode and reftex.
It's also necessary (at least on a mac) to add the path with the latex bin files.

For synctex to work https://www.gnu.org/software/auctex/manual/auctex/I_002fO-Correlation.html
#+BEGIN_SRC emacs-lisp tangle:no
  (use-package tex
  :ensure auctex
  :mode ("\\.tex\\'" . LaTeX-mode)
  ;:interpreter ("LatexMk" . LaTeX-mode)
  :hook ((LaTeX-mode . turn-on-reftex)
         (LaTeX-mode . LaTeX-math-mode)
         (LaTeX-mode . TeX-source-correlate-mode))
  :config
  (setq TeX-auto-save      t		;; enable parse on load and save
	TeX-parse-self     t
	TeX-save-query     nil		;; autosave before compiling
	reftex-plug-into-AUCTeX t)
  (setq-default TeX-master nil))        ;; let AUCTeX query for master file name
#+END_SRC


Add LatexMk support to AUCTeX
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package auctex-latexmk
      :ensure t
      :hook (LaTeX-mode . auctex-latexmk-setup)
      :init
      :config
      ;; Let LatexMk to pass the -pdf flag when TeX-PDF-mode is active
      (setq auctex-latexmk-inherit-TeX-PDF-mode t
      ;; Make LatexMk be the default command when invoking TeX-command-master (C-c C-c)
            TeX-command-default "LatexMk"))
    #+END_SRC

Add company support to AUCTeX
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package company-auctex
        :ensure t
        :after (auctex company)
        :hook (LaTeX-mode . company-auctex-init))
    #+END_SRC

Insert braces after typing <^> and <_> in math mode.
Autocomplete dollar sign.
#+BEGIN_SRC emacs-lisp :tangle no
(setq TeX-electric-sub-and-superscript 1)
;; (setq TeX-electric-math (cons "$" "$"))
#+END_SRC

Open PDFs with pdf-tools.
#+BEGIN_SRC emacs-lisp :tangle no
  (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
	TeX-view-program-selection '((output-pdf "PDF Tools"))
	TeX-source-correlate-start-server t)
#+END_SRC

* Org mode
The following is for syntax highlighting the code source blocks inside org mode. \\
And adding basic logging to keep track of when a certain TODO item was finished.

  #+BEGIN_SRC emacs-lisp
    (setq org-confirm-babel-evaluate nil
          org-src-fontify-natively   t
          org-src-tab-acts-natively  t
          org-log-done 'time
          org-directory "~/.org")
  #+END_SRC

  Use UTF-8 bullets for org lists and add Evil bindings for org mode.

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :hook (org-mode . org-bullets-mode))

     (use-package evil-org
       :ensure t
       :defer t
       :delight
       :hook (org-mode . evil-org-mode))
   #+END_SRC

* Magit

  Magit is an interface to the version control system Git, implemented as an Emacs package.
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :defer t
       :bind (("C-x g" . magit-status))
       :config  (require 'evil-magit))

     (use-package evil-magit
       :ensure f
       :defer t)
   #+END_SRC

* Ledger
A major mode for editing files in the format used by the [[https://github.com/ledger/ledger][ledger]] command-line accounting system.

   #+BEGIN_SRC emacs-lisp
     (use-package ledger-mode
       :ensure t
       :defer t
       :config
     ; set `C-c $` to insert `€` symbol.
     (with-eval-after-load 'ledger-mode
       ;(define-key ledger-mode-map (kbd "C-c $") "€")
       (define-key ledger-mode-map (kbd "C-c $") (lambda () (interactive) (insert "€")))
       (define-key ledger-mode-map (kbd "C-c c") 'ledger-mode-clean-buffer)))
   #+END_SRC

* Markdown
A major mode for editing Markdown-formatted text.

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :defer t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       ;:bind ("<tab>" . markdown-cycle)
       :init (setq markdown-command
                 (concat
                 "/usr/local/bin/pandoc"
                 " --from=markdown+hard_line_breaks --to=html"
                 " --mathjax --highlight-style=pygments"))
       :config
              (setq markdown-max-image-size (quote (50 . 20))
                    ; doesn't create .html file when using live-preview mode, deletes after refresh.
                    ; markdown-live-preview-delete-export 'delete-on-export
                    markdown-split-window-direction 'right ))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t
       :defer t
       :commands (markdown-mode gfm-mode)
       :mode (
              ("\\.yaml\\'" . yaml-mode)
              ("\\.yml\\'" . yaml-mode))
       :config)
   #+END_SRC

* IRC
  Using emacs' built-in ERC for IRC.
   #+BEGIN_SRC emacs-lisp
     (use-package erc-hl-nicks
	 :ensure t
         :defer t
	 :after erc
	 :config
	 ; Align nicknames
	 (setq erc-fill-function `erc-fill-static
	       erc-fill-static-center 16
	       erc-prompt "❯❯ "))  ;; Set the ERC prompt
   #+END_SRC

* PDF
  Use emacs to view PDFs
  Use homebrew to install poppler and automake first: `brew install automake poppler`
  Then make sure your pdf-tools emacs package is up to date
 (in fact make sure that all of your packages are up to date), then do `M-x pdf-tools-install`.
 If building fails try setting
`(setenv "PKG_CONFIG_PATH" "/usr/local/lib/pkgconfig:/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig")`
according to this post https://github.com/politza/pdf-tools/issues/480#issuecomment-473707355.
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
	 :ensure t
	 :defer t
	 :mode (("\\.pdf$" . pdf-view-mode))
	 :init
	 (pdf-loader-install)
	 :config
	; See https://github.com/politza/pdf-tools/issues/480
	 (setenv "PKG_CONFIG_PATH" "/usr/local/lib/pkgconfig:/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig")
	 (with-eval-after-load 'pdf-view (require 'evil-collection-pdf) (evil-collection-pdf-setup))
	 (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
   #+END_SRC

* Tramp
[[https://github.com/masasam/emacs-helm-tramp][Tramp helm]] interface for ssh server and docker and vagrant.

#+BEGIN_SRC emacs-lisp
  (use-package helm-tramp
      :ensure t
      :defer t
      :init
      :bind ("C-c s" . helm-tramp)
      :config
      (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
      (setq tramp-default-method "ssh"))
#+END_SRC

* Blogging
[[https://ox-hugo.scripter.co/][ox-hugo]] is an Org exporter backend that exports Org to [[https://gohugo.io/][Hugo]]-compatible
Markdown ([[https://github.com/russross/blackfriday][Blackfriday]]) and also generates the front-matter (in TOML or
YAML format).
Also add an org-capture template to make blogging easier.
  #+BEGIN_SRC emacs-lisp
    (use-package ox-hugo
        :ensure t
        :defer t
        :commands org-hugo-export-wim-to-md
        :config
    (with-eval-after-load 'org-capture
    (defun org-hugo-new-subtree-post-capture-template ()
      "Returns `org-capture' template string for new Hugo post.
    See `org-capture-templates' for more information."
      (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
             (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
             (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
             (fname (org-hugo-slug title)))
        (mapconcat #'identity
                   `(
                     ,(concat "* " title)
                     ":PROPERTIES:"
                     ,(concat ":EXPORT_FILE_NAME: " fname)
                     ":EXPORT_DESCRIPTION: "
                     ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                     ":END:"
                     "%?\n")                ;Place the cursor here finally
                   "\n")))

      (add-to-list 'org-capture-templates
                   '("h"                ;`org-capture' binding + h
                     "Hugo post"
                     entry
                     ;; It is assumed that below file is present in `org-directory'
                     ;; and that it has a "Blog Ideas" heading. It can even be a
                     ;; symlink pointing to the actual location of all-posts.org!
                     (file+olp "blog.org" "Blog")
                     (function org-hugo-new-subtree-post-capture-template)))))
#+END_SRC

* Language Server Protocol
  Testing LSP mode for python
  #+BEGIN_SRC emacs-lisp
    (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred))

    (use-package lsp-mode
      :ensure t
      :defer t
      :hook ((python-mode . lsp)
             (python-mode . flycheck-mode)
             (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp
      :custom
      (python-indent-guess-indent-offset nil)
      (lsp-pyls-configuration-sources ["flake8"])
      (lsp-pyls-plugins-pylint-enabled nil)
      (lsp-pyls-plugins-pycodestyle-enabled t)
      (lsp-signature-render-documentation nil)
      (lsp-signature-auto-activate nil))

    (use-package lsp-ui
      :ensure t
      :defer t
      :after (lsp-mode flycheck)
      :custom
      (lsp-ui-doc-enable nil)
      (lsp-ui-doc-use-childframe t)
      (lsp-ui-doc-position 'top)
      (lsp-ui-doc-include-signature t)
      (lsp-ui-sideline-enable nil)
      (lsp-ui-flycheck-enable t)
      (lsp-ui-flycheck-list-position 'right)
      (lsp-ui-flycheck-live-reporting t)
      (lsp-ui-peek-enable t)
      (lsp-ui-peek-list-width 60)
      (lsp-ui-peek-peek-height 25))


    (use-package company-lsp
      :ensure f
      :defer t
      :after company
      :config
      (push 'company-lsp company-backends)

      ;; Disable client-side cache because the LSP server does a better job.
      (setq company-lsp-async t
            company-lsp-cache-candidates 'auto))

    (use-package helm-lsp
      :ensure t
      :defer t
      :commands helm-lsp-workspace-symbol)

    (use-package pyvenv
      :ensure t
      :defer t
      :ensure t)

    (use-package flycheck
      :ensure t
      :defer t
      :config
      :custom (flycheck-python-flake8-executable "flake8"))
  #+END_SRC
  #+begin_src emacs-lisp
    (use-package go-mode
    :ensure t
    :hook (go-mode . lsp-deferred))

  #+end_src

* Custom Functions

Insert the result of some Emacs Lisp expression at point.
Useful if you want do quick arithmetic.

    #+BEGIN_SRC emacs-lisp
    (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
                (current-buffer))
        (error (message "Invalid expression")
            (insert (current-kill 0)))))

    (global-set-key (kbd "C-c C-e") 'eval-and-replace)
    #+END_SRC

Simply pressing `Control-c r` will reload this file, very handy.
You can also manually invoke `config-reload`.
    #+BEGIN_SRC emacs-lisp
        (defun config-reload ()
        "Reloads ~/.emacs.d/config.org at runtime"
        (interactive)
        (org-babel-load-file (expand-file-name "emacs.org" user-emacs-directory)))
        (global-set-key (kbd "C-c r") 'config-reload)
    #+END_SRC

Quickly edit `emacs.org`.
    #+BEGIN_SRC emacs-lisp
        (defun config-visit ()
        (interactive)
        (find-file (expand-file-name "emacs.org" user-emacs-directory)))
        (global-set-key (kbd "C-c e") 'config-visit)
    #+END_SRC

When switching projects in Emacs, it can be prudent to clean up every once in a
while. Deleting all buffers except the current one is one of the things I often
do (especially in the long-running `emacsclient`).

    #+BEGIN_SRC emacs-lisp
        (defun kill-other-buffers ()
        "Kill all other buffers."
        (interactive)
        (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
    #+END_SRC

* End notes

   Before you can build this on a new system, make sure that you put
   the cursor over any of these properties, and hit: =C-c C-c=

   Local variables is used to tangle the file on save.

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    header-args:emacs-lisp  :tangle yes
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
