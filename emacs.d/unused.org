* Movement
** Vim keys

   Go to next CHAR which is similar to =f= and =t= in vim
   setting for iy-go-to-char.  \\
   It's currently not in use since I'm using evil mode.

   #+BEGIN_SRC emacs-lisp :tangle no
(use-package iy-go-to-char
  :ensure t
  :bind
  ("C-c f" . iy-go-to-char)
  ("C-c F" . iy-go-to-char-backward)
  ("C-c ;" . iy-go-to-or-up-to-continue)
  ("C-c ," . iy-go-to-or-up-to-continue-backward))
   #+END_SRC

** Windmove
   Move around windows using cardinal directions (S-<left>, S-<right>, S-<up>,
   S-<down>) \\
   When using evil mode ~C-w h/j/k/l~ also work. \\
   Which is actually faster because your fingers stay on the homerow. \\
   To enable tangle this code block.

   #+BEGIN_SRC emacs-lisp :tangle no
     (windmove-default-keybindings)
   #+END_SRC

** Delete selection mode
   Delete Selection mode lets you treat an Emacs region much like a typical text selection outside of Emacs. \\
   Not in use right now due to evil mode.
   #+BEGIN_SRC emacs-lisp :tangle no
     (delete-selection-mode 1)
   #+END_SRC

** Multiple cursors
   Multiple cursors for Emacs. \\
   Using the evil version, so this is disabled for the time being.
   #+BEGIN_SRC emacs-lisp :tangle no
       (use-package multiple-cursors
       :ensure t
       :bind (
         ("C-S-c C-S-c" . mc/edit-lines)
         ("C-c C-. ."   . mc/mark-all-dwim)
         ("C-c C-. C-." . mc/mark-all-like-this-dwim)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-. n"   . mc/mark-next-like-this)
         ("C-c C-. p"   . mc/mark-previous-like-this)
         ("C-c C-. a"   . mc/mark-all-like-this)
         ("C-c C-. N"   . mc/mark-next-symbol-like-this)
         ("C-c C-. P"   . mc/mark-previous-symbol-like-this)
         ("C-c C-. A"   . mc/mark-all-symbols-like-this)
         ("C-c C-. f"   . mc/mark-all-like-this-in-defun)
         ("C-c C-. l"   . mc/edit-lines)
         ("C-c C-. e"   . mc/edit-ends-of-lines) ))
   #+END_SRC

* Variables
** Tabs vs Spaces
   Make tab key do indent first then completion.

   #+BEGIN_SRC emacs-lisp :tangle no
     (setq-default tab-always-indent t
                   tab-always-indent 'complete)
   #+END_SRC

* Visual settings
** Line numbering
*** Enable line numbers in all buffers
    Turned off for now since I'm using relative file numbering

    #+BEGIN_SRC emacs-lisp :tangle no
      (global-linum-mode t)
    #+END_SRC

** Theme
   A beautiful theme by [[https://github.com/purcell/color-theme-sanityinc-tomorrow][Steve Purcell]], you can check out screenshots over at [[https://emacsthemes.com/themes/sanityinc-tomorrow-themes.html][emacsthemes.com]].

   #+BEGIN_SRC emacs-lisp :tangle no
    (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :init
    (load-theme 'sanityinc-tomorrow-night t))
   #+END_SRC

   [[https://github.com/bbatsov/solarized-emacs][Solarized theme]]
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package solarized-theme
     :ensure t
     ; :defer 1
     :init
     :config
     (setq solarized-high-contrast-mode-line nil
           solarized-use-less-bold t)
     ;(setq solarized-distinct-fringe-background t)
     (load-theme 'solarized-dark t)
     (custom-set-faces
     '(mode-line ((t
     (:underline nil :overline nil)))))
     )
   #+END_SRC

   [[https://github.com/TheBB/spaceline][This]] is the package that provides Spacemacs with its famous mode-line theme.
   I am still looking for a way to defer loading of spaceline.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package spaceline-config
      :ensure spaceline
      ; :defer 1
      :demand t
      :config
      (require 'spaceline-config)
      (spaceline-emacs-theme)
      (spaceline-helm-mode 1)
      (setq powerline-image-apple-rgb t  ;; Fix for https://github.com/milkypostman/powerline/issues/54
            spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))
    #+END_SRC

** Highlight background colour
   Background color in visual select mode.

   #+BEGIN_SRC emacs-lisp
;;     (set-face-background 'hl-line "#2b2f31")
    (set-face-attribute 'region nil :background "#676767")
   #+END_SRC

 Change the look and feel for Mac.
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC
** Highlight parenthesis
It would be nice to have the first matching parenthesis to be underlined.
So when this [[https://github.com/tsdh/highlight-parentheses.el/issues/9][issue]] is solved, enable this package.
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package highlight-parentheses
    :ensure t
    ;:defer t
    :delight
    :config
    (setq hl-paren-highlight-adjacent t)
    (setq hl-paren-colors (quote ("tomato2" "yellow3" "#268bd2" "#6c71c4" "#859900")))
    :hook ((prog-mode text-mode) . highlight-parentheses-mode))
  #+END_SRC

Since we already use smartparens, use that for highlighting.
#+BEGIN_SRC emacs-lisp :tangle no
  (setq show-paren-delay 0
        show-paren-style 'parenthesis
        show-paren-when-point-in-periphery t
        show-paren-when-point-inside-paren t)
  (set-face-attribute 'show-paren-match nil :underline '(:color "white" :style line))
  (set-face-foreground 'show-paren-match "yellow3")
  (add-hook 'prog-mode-hook 'show-paren-mode)
  (add-hook 'text-mode-hook 'show-paren-mode)
#+END_SRC
* Loading and Finding Files
** Ido
   Interactively do things with buffers and files.
   Helm replaced Ido mode for me, hence I didn't tangle this.
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package ido
     :config
     (ido-mode t)
     (setq ido-separator            "\n" ;; make ido display choices vertically
           ido-enable-flex-matching t ;; display any item that contains the chars you typed
           max-mini-window-height   0.5))
   #+END_SRC

* Evil mode
  Customizable key sequence to escape from insert state and everything else in Emacs. \\
  The default keybinding is =fd=.
  See [[https://github.com/syl20bnr/evil-escape][github]] for further details.
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package evil-escape
    :ensure t
    :config
    (evil-escape-mode t))
#+END_SRC

** Multiple Cursors
 Multiple cursors for evil mode. \\
 Keybindings are in the [[https://github.com/gabesoft/evil-mc/blob/master/evil-mc.el][evil-mc.el]].
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package evil-mc
    :ensure t
    :defer t)
  #+END_SRC

** Custom settings
Prevent the visual selection overriding the system clipboard.
This is useful if when using `viwp`, which does not work otherwise.

    #+BEGIN_SRC emacs-lisp
        (fset 'evil-visual-update-x-selection 'ignore)
    #+END_SRC

  When the buffer loses focus, return to evil-normal-mode. \\
  This is useful when you alt-tab back and directly want to move around.
    #+BEGIN_SRC emacs-lisp :tangle no
        (add-hook 'focus-in-hook 'normal-mode)
    #+END_SRC

* Org mode
  Load the languages that could be used.
  #+BEGIN_SRC emacs-lisp :tangle no
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((sh         . t)
       (emacs-lisp . t)
       (python     . t)
       (latex      . t)
       (ruby       . t)
       (dot        . t)
       (css        . t)))
  #+END_SRC

  Remove the HTML validate link that appears at the postamble of your exported HTML file.
  #+BEGIN_SRC emacs-lisp :tangle no
    (setq org-html-validation-link nil)
  #+END_SRC

* LaTeX
Add custom shortcuts to LaTeX-math-list
Can be customized using "`M-x` customize-variable `RET` LaTeX-math-list `RET`"
I prefer it to be saved into the init.el (using customize-variable) instead of custom.el.

#+BEGIN_SRC emacs-lisp
  (setq LaTeX-math-list
        '((?2 "prime" "Misc Symbol" 2032)))
#+END_SRC

Define shortcuts for LaTeX-math-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-math-mode-hook
    (lambda ()
     (local-set-key (kbd "`1") 'LaTeX-math-partial)
     (local-set-key (kbd "`3") 'LaTeX-math-sqrt)))
#+END_SRC

Latex color overrides in solarized dark theme
#+BEGIN_SRC emacs-lisp
 (custom-set-faces
 '(font-latex-script-char-face ((t (:foreground "firebrick3")))))
#+END_SRC

Set custom program to open pdf, dvi and html
#+BEGIN_SRC emacs-lisp
(setq
 ;; Set the list of viewers for Mac OS X.
 TeX-view-program-list
 '(("Preview.app" "open -a Preview.app %o")
   ("Skim" "open -a Skim.app %o")
   ("okular" "okular %o")
   ("displayline" "displayline %n %o %b")
   ("open" "open build/%o")))

(if (eq system-type 'darwin)
 ;; Select the viewers for each file type.
 ;; Depending on system-type
(setq
 TeX-view-program-selection
 '((output-dvi "open")
   (output-pdf "Skim")
   (output-html "open")))
(if (eq system-type 'gnu/linux)
(setq
 TeX-view-program-selection
 '((output-dvi "open")
   (output-pdf "okular")
   (output-html "open"))))
)
#+END_SRC

* Python
  Company-mode completion back-end for Python JEDI.
  #+BEGIN_SRC emacs-lisp :tangle no
    (defun my/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))

    (add-hook 'python-mode-hook 'my/python-mode-hook)
  #+END_SRC

  Call jedi in python buffer.
  #+BEGIN_SRC emacs-lisp :tangle no
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)                 ; optional
  #+END_SRC

    Use Jupyter console (recommended for interactive Python).
  For it to work in virtualenvs: `pip3 install juptyter-console`.
  #+BEGIN_SRC emacs-lisp :tangle no
    (setq python-shell-interpreter "jupyter"
        python-shell-interpreter-args "console --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
   ;; (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
  #+END_SRC

 Change elpy's RPC to python 3
 #+BEGIN_SRC emacs-lisp :tangle no
   (setq elpy-rpc-python-command "python3")
 #+END_SRC

 Change virtualenvwrapper to python 3
 #+BEGIN_SRC emacs-lisp :tangle no
   (setq pyvenv-virtualenvwrapper-python "python3")
 #+END_SRC

  This is used as an workaround for the following issue [[https://github.com/jorgenschaefer/elpy/issues/887]]
  #+BEGIN_SRC emacs-lisp :tangle no
    (setq python-shell-completion-native-enable nil)
  #+END_SRC

  Emacs IPython Notebook (EIN)
  Some jupyter server args error, will have to fix later and allow tangling
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package ein
      :ensure t
      :defer t
      :config
      (setq ein:completion-backend (quote ein:use-company-backend))
            ein:jupyter-server-args (list "--no-browser"))
    #+END_SRC

* Undo and Redo
  The ultimate undo history visualizer.
  Evil requires undo-tree, no need for this explicitly.
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package undo-tree
    :ensure t
    :defer t)
    :bind ("C-x u" . undo-tree-visualize))
    :init
    :config
    (global-undo-tree-mode t))
  #+END_SRC
* Ledger
  Set a custom color for the periodic xact face as it was too bright green in the Solarized theme.
    #+BEGIN_SRC emacs-lisp
    (custom-set-faces
    '(ledger-font-periodic-xact-face ((t (:foreground "#859900" :weight normal)))))
    #+END_SRC
