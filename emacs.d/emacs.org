#+AUTHOR: Shourai
#+TITLE: Emacs Configuration File

This configuration is now using [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.  The configuration is hugely
inspired by [[https://github.com/howardabrams/dot-files/blob/master/emacs.org][Howard Abrams]] & [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel Mai]] a big thank you to them. \\
An essential read on literative programming would be this [[http://howardism.org/Technical/Emacs/literate-programming-tutorial.html][tutorial]] by Howard
Abrams.

* Installing Emacs
  
  On OS X, [[http://brew.sh/][homebrew]] is an easy way to install emacs.
  
  Here's what the parameter means.
   - ~--with-cocoa~ :: installs emacs with the OS X GUI version
   - ~--with-gnutls~ :: installs emacs with GnuTLS to utilize encrypted SSL and TLS connections
   - ~--with-imagemagick~ :: installs emacs with imagemagick support for image processing
   - ~--with-librsvg~ :: install emacs with SVG rendering support using Cairo
        
Note:
Emacs does not support ImageMagick 7:
Reported on 2017-03-04: https://debbugs.gnu.org/cgi/bugreport.cgi?bug=25967
As soon as support is added ~--with-imagemagick@6~ can be changed to ~--with-imagemagick~
        
   #+begin_src sh
   brew install emacs --with-cocoa --with-gnutls --with-imagemagick@6 --with-librsvg
   #+end_src
   
   This installs the latest version of Emacs in =/usr/local/bin/emacs=.
   To link the GUI version to =/Application/Emacs.app= use =brew linkapps emacs=.
   
   All Homebrew options for Emacs can be seen with the command:
   
   #+BEGIN_SRC sh
     brew options emacs
   #+END_SRC
   
** Loading this File
   
   To "load" the contents of this file, add the following to =$HOME/.emacs.d/init.el=:
   
   #+BEGIN_SRC emacs-lisp :tangle no
      (org-babel-load-file "~/.emacs.d/emacs.org")
   #+END_SRC
   
   It will automatically generate an =emacs.el= file and subsequently load it in.
   
* General Settings

** Customization Section
   
   While I would rather program my configurations, sometimes the Emacs
   menu system is "good enough", but I want it in its own file:
   
   #+BEGIN_SRC emacs-lisp :tangle no
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC
   
   While this ought to work, I found that you need to put this in the `init.el`
   file instead.
   
** Setting up the Load Path
   
   Extra packages not available via the package manager go in my
   personal stash at: =$HOME/.emacs.d/elisp=
   
   #+BEGIN_SRC emacs-lisp :tangle no
     (add-to-list 'load-path (user-emacs-directory "elisp"))
   #+END_SRC

** Miscellaneous settings

Change 'yes/no' to just 'y/n'

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

Clean scratch buffer and don't ask about symlinks
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil
           vc-follow-symlinks t)
   #+END_SRC

Save file when the frame loses focus.
These hooks fire when any Emacs frame gains or loses focus. \\
This means that if you Alt-Tab or Alt-` between Emacs frames, the focus-out-hook and
focus-in-hook will run. \\
I think this also causes auto-save to not work anymore (i.e. no more foo# files)

#+BEGIN_SRC emacs-lisp
    (defun save-all ()
    (interactive)
    (save-some-buffers t))

    (add-hook 'focus-out-hook 'save-all)
#+END_SRC

Tidy up the backup and auto-save files created by emacs.
They are neatly tucked away in a folder.
The auto-saves directory is not automatically created so we have to do it explicitly.

#+BEGIN_SRC emacs-lisp
    (make-directory "~/.tmp/emacs/auto-saves/"  t)
    (setq 
        backup-directory-alist
            '(("." . "~/.tmp/emacs/backups/"))    ; don't litter my fs tree
        auto-save-file-name-transforms
            `((".*" , "~/.tmp/emacs/auto-saves/" t)))

    (setq
        backup-by-copying t      ; don't clobber symlinks
        delete-old-versions t    ; don't ask about deleting old versions
        kept-new-versions 10     ; keep 10 latest versions
        kept-old-versions 2      ; keep 2 old versions
        version-control t)       ; use versioned backups
#+END_SRC


Do not silently put a newline at the end of a file when saving or writng a file
if there isn't already one.
#+BEGIN_SRC emacs-lisp
(setq mode-require-final-newline nil)
#+END_SRC

* Package Initialization
** Package Managers
   #+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("marmalade" . "https://marmalade-repo.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")))
;; (package-initialize)
;; (package-refresh-contents)
   #+END_SRC
   
** Use-Package
   
   Using [[https://github.com/jwiegley/use-package][use-package]] to automatically install certain packages, as
   well as the ease of lazily loading them.
   
   #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

          ;;(require 'use-package)
     (eval-when-compile
       (require 'use-package))
   #+END_SRC
* Variables
  
** Personal Information
   
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Shourai"
     user-mail-address "mail@shourai.net")
   #+END_SRC
   
** Tabs vs Spaces
   
   I have learned to distrust tabs in my source code, so let's make
   sure that we only have spaces. \\ 
   See [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][this discussion]] for details.
   
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil
                   tab-width 4)
   #+END_SRC
   
   Make tab key do indent first then completion.
   
   #+BEGIN_SRC emacs-lisp :tangle no
     (setq-default tab-always-indent t
                   tab-always-indent 'complete)
   #+END_SRC
* Visual settings
  
  I like a minimal setup when working on code, therefore I disable the toolbar and scroll bar. \\
  And if it detects I'm using a GUI I set the frame to be the size of 130
  columns and 40 rows. Also the windows open at 100 pixels from the top and left.
  
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (blink-cursor-mode -1)
    (setq default-frame-alist
      '(
        (top . 100)
        (left . 100)
        (width . 130) ; character
        (height . 40) ; lines
        ))
  #+END_SRC
  
    To get started directly when opening emacs I inhibit the startup message.
  
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    #+END_SRC
  
    Show the time in 24 hour format when `display-time` is enabled` and enable date
    #+BEGIN_SRC emacs-lisp
    (setq display-time-24hr-format  t
        display-time-day-and-date t)
    #+END_SRC
  
** Which key
   [[https://github.com/justbur/emacs-which-key][Which key]] allows for a contextualized completion of emacs commands
   shown in the mini-buffer. \\
   It's really helpful if you can't remember the next keypress.
   
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
        :ensure t 
        :defer 2 
        :config
        (which-key-mode))
   #+END_SRC
** Line numbering
***  Relative line numbering
     
     For relative line numbering I use nlinum-relative. \\
     nlinum-relative is faster than linum-relative because of its use of
     jit-lock. \\
     nlinum-relative only redisplays line numbers when idle which
     is much more smoother especially with big files.
     
     #+BEGIN_SRC emacs-lisp
       (use-package nlinum-relative
       :ensure t
       :config
       (global-nlinum-relative-mode)
       (setq nlinum-relative-redisplay-delay 0.5)
       :defer 2)
     #+END_SRC
     
** Theme
   A beautiful theme by [[https://github.com/purcell/color-theme-sanityinc-tomorrow][Steve Purcell]], you can check out screenshots over at [[https://emacsthemes.com/themes/sanityinc-tomorrow-themes.html][emacsthemes.com]].
   
   #+BEGIN_SRC emacs-lisp :tangle no
    (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :init
    (load-theme 'sanityinc-tomorrow-night t))
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
    (use-package solarized-theme 
    :ensure t
    :init
    (setq solarized-high-contrast-mode-line t)
    (load-theme 'solarized-light t)
    :config
    (custom-set-faces
    '(mode-line ((t
    (:underline nil :overline nil :box
                (:line-width 1 :color "#fdf6e3")
                :foreground "#fdf6e3" :background "#657b83")))))
    )
   #+END_SRC

   [[https://github.com/TheBB/spaceline][This]] is the package that provides Spacemacs with its famous mode-line theme.
   Disabled since it requires a third of a second during startup.
   
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package spaceline
     :ensure t
     :config
     (require 'spaceline-config)
     (spaceline-emacs-theme)
     (setq ns-use-srgb-colorspace nil)
     (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))
   #+END_SRC

** Highlight current line
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1) 
;;     (set-face-background 'hl-line "#2b2f31")
   #+END_SRC

** Highlight background colour
   Background color in visual select mode.

   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'region nil :background "#676767")
   #+END_SRC
** Word wrap
The sacred 80 column rule that states “Thou shalt not cross 80 columns in thy
file” originated from IBM 80 column punch cards, was reinforced by early
terminal and printout restrictions, and is still common in coding standards
today, including Google's Java standard and the Linux kernel standard.

    #+BEGIN_SRC emacs-lisp
      (setq-default fill-column 80)

      ;;(add-hook 'text-mode-hook '(lambda ()
      ;;                               (auto-fill-mode 1)))

      ;; It's annoying to have equations cut off at 80 characters in LaTeX, 
      ;; when writing regular text use `M-x fill-paragraph` bound to `M-q` to align at 80 characters.
      ;;(add-hook 'LaTeX-mode-hook '(lambda ()
      ;;                              (auto-fill-mode 1)))
    #+END_SRC


Highlight text that crosses over the 80 column mark. It does not automatically
fill the line but only gives a visual indication.
    #+BEGIN_SRC emacs-lisp
    (setq-default
    whitespace-line-column 80
    whitespace-style       '(face lines-tail))
    ; (add-hook 'LaTeX-mode-hook 'whitespace-mode) ; not working?
    #+END_SRC

** Rainbow delimiter
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
    :ensure t
    :defer t 
    :config )
  #+END_SRC
** Highlight parenthesis
  #+BEGIN_SRC emacs-lisp
    (use-package highlight-parentheses
    :ensure t
    :defer t 
    :config )
  #+END_SRC

* Loading and Finding Files
** Helm
   [[https://tuhdo.github.io/helm-intro.html][Helm information]]  
   Emacs incremental completion and selection narrowing framework.
   #+BEGIN_SRC emacs-lisp
     (use-package helm
     :ensure t
     :defer t
     :bind (("M-x" . helm-M-x)
            ("C-c h" . helm-command-prefix)
            ("C-x C-b" . helm-mini)
            ("C-x C-f" . helm-find-files)
            ("M-y" . helm-show-kill-ring))
     :config
     (require 'helm-config)
     (helm-mode 1)
     (setq helm-mode-fuzzy-match        t    ;; globally enable fuzzy matching for helm-mode
           helm-buffers-fuzzy-matching  t
           helm-recentf-fuzzy-match     t
           helm-quick-update            t))
   #+END_SRC
   
* Autocompletion
** Snippets
   A template system for Emacs.
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
     :ensure t
     :defer 10
     :config
     (yas-global-mode 1))
   #+END_SRC
   
** Company Mode
   Modular in-buffer completion framework for Emacs.
   #+BEGIN_SRC emacs-lisp
     (use-package company
     :ensure t
     :defer 10
     :bind ("C-," . company-complete-common)
     :init
     ;(add-hook 'after-init-hook 'global-company-mode)  ;; using this doesn't allow deferring
     :config
     (global-company-mode 1)
     (setq company-idle-delay  0.3 ; company delay until suggestions are shown
           company-show-numbers t))

   #+END_SRC


   Cycle forward and backward using C-n and C-p instead of M-n and M-p.
   #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
   #+END_SRC


   Add quickhelp for company mode
   #+BEGIN_SRC emacs-lisp
     (use-package company-quickhelp
     :ensure t
     :defer 10
     :config
     (company-quickhelp-mode 1))
   #+END_SRC
   
** Smartparens
   Minor mode for Emacs that deals with parens pairs and tries to be smart about it.
   #+BEGIN_SRC emacs-lisp
      (use-package smartparens
      :ensure t
      :defer 10
      :init
      (add-hook 'python-mode-hook #'smartparens-mode)
      (add-hook 'LaTeX-mode-hook #'smartparens-mode)
      :config
      (eval-after-load 'latex '(require 'smartparens-latex))
      (sp-use-smartparens-bindings))
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
     (use-package evil-smartparens
     :ensure t
     :defer 10
     :init
     (add-hook 'python-mode-hook #'evil-smartparens-mode))
   #+END_SRC
* Spell-checking
While typing text I like to activate `flyspell mode` which checks my spelling on
the fly. My preferred spelling is `english`. \\
The dictionaries have to be installed via `brew install aspell`.

    #+BEGIN_SRC emacs-lisp
        (setq ispell-dictionary "english")
    #+END_SRC 
* Evil mode
  Evil is an extensible vi layer for Emacs. \\
  It provides Vim features like Visual selection and text objects.
  #+BEGIN_SRC emacs-lisp
    (use-package evil
    :ensure t
    :defer t
    :bind (("C-z" . turn-on-evil-mode)
           ("C-x C-z" . turn-off-evil-mode))
    :init
    ;; (setq evil-want-C-u-scroll t) ;; This does not play nicely when having to use `C-u M-x` commands
    (evil-mode t))
  #+END_SRC

  When the buffer loses focus, return to evil-normal-mode. \\
  This is useful when you alt-tab back and directly want to move around.
    #+BEGIN_SRC emacs-lisp :tangle no
        (add-hook 'focus-in-hook 'normal-mode)
    #+END_SRC

** Custom Keybindings 
  Increment and decrement numbers in Emacs.
  #+BEGIN_SRC emacs-lisp
    (use-package evil-numbers
    :ensure t
    :bind ("C-c +" . evil-numbers/inc-at-pt)
          ("C-c -" . evil-numbers/dec-at-pt))
  #+END_SRC
  
** Surround
This package emulates [[https://github.com/tpope/vim-surround][surround.vim by Tim Pope]]. The functionality is wrapped into a minor mode.
  #+BEGIN_SRC emacs-lisp
    (use-package evil-surround
    :ensure t
    :defer 10
    :config
    (global-evil-surround-mode 1))
  #+END_SRC

** Multiple Cursors
 Multiple cursors for evil mode. \\
 Keybindings are in the [[https://github.com/gabesoft/evil-mc/blob/master/evil-mc.el][evil-mc.el]].
  #+BEGIN_SRC emacs-lisp
    (use-package evil-mc
    :ensure t
    :defer t)
  #+END_SRC
** Custom settings
Prevent the visual selection overriding the system clipboard.
This is useful if when using `viwp`, which does not work otherwise.

    #+BEGIN_SRC emacs-lisp
        (fset 'evil-visual-update-x-selection 'ignore)
    #+END_SRC
** Replace with register
  Port of [ReplaceWithRegister](http://www.vim.org/scripts/script.php?script_id=2703)
  #+BEGIN_SRC emacs-lisp
    (use-package evil-replace-with-register
    :ensure t
    :init
    (setq evil-replace-with-register-key (kbd "gr"))
    (evil-replace-with-register-install))
  #+END_SRC
* Movement
** Avy
   Avy is a GNU Emacs package for jumping to visible text using a char-based decision tree. \\
   See for more information [[https://github.com/abo-abo/avy][abo-abo]]'s github.
   
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :defer t
       :bind (("C-:" . avy-goto-char)
       ("C-'" . avy-goto-char-2)
       ("M-g f" . avy-goto-line)
       ("M-g w" . avy-goto-word-1)
       ("M-g e" . avy-goto-word-0)))
   #+END_SRC
   
** Expand region
   Expand region increases the selected region by semantic units.
   
   #+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :defer t
  :bind ("C-=" . er/expand-region))
   #+END_SRC
   
* Latex
We will be using AUCTeX as our Emacs TeX environment, together with yasnippets it 
works as well as any dedicated LaTeX program.

#+BEGIN_SRC emacs-lisp
    (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . LaTeX-mode)
    :interpreter ("LatexMk" . LaTeX-mode)
    :config
    (setq TeX-auto-save      t      ;; enable parse on load and save
          TeX-parse-self     t
          TeX-save-query     nil)    ;; autosave before compiling
    (setq-default TeX-master nil))  ;; let AUCTeX query for master file name
#+END_SRC

When a latex file is loaded, let it load visual-line, flyspell, math-mode and reftex.
It's also necessary (at least on a mac) to add the path with the latex bin files.

#+BEGIN_SRC emacs-lisp
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t)
    (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin"))
    (setq exec-path (append exec-path '("/Library/TeX/texbin")))
#+END_SRC

Add LatexMk support to AUCTeX
    #+BEGIN_SRC emacs-lisp
        (use-package auctex-latexmk
        :ensure t
        :defer 10
        :init (add-hook 'LaTeX-mode-hook 'auctex-latexmk-setup)
        :config
        ;; Let LatexMk to pass the -pdf flag when TeX-PDF-mode is active 
        (setq auctex-latexmk-inherit-TeX-PDF-mode t)
        ;; Make LatexMk be the default command when invoking TeX-command-master (C-c C-c)
        (add-hook 'LaTeX-mode-hook
        (lambda ()
        (push
        '("latexmk" "latexmk -pdf %s -auxdir=build" TeX-run-TeX nil t
            :help "Run latexmk on file")
            TeX-command-list)))
        (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk"))))

    #+END_SRC

Add company support to AUCTeX
    #+BEGIN_SRC emacs-lisp
      (use-package company-auctex
        :ensure t
        :defer 5
        :init (add-hook 'LaTeX-mode-hook 'company-auctex-init))
    #+END_SRC

Add custom shortcuts to LaTeX-math-list
Can be customized using "`M-x` customize-variable `RET` LaTeX-math-list `RET`"
I prefer it to be saved into the init.el (using customize-variable) instead of custom.el.
#+BEGIN_SRC emacs-lisp
  (setq LaTeX-math-list
        '((?2 "prime" "Misc Symbol" 2032)))
#+END_SRC

Define shortcuts for LaTeX-math-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-math-mode-hook
    (lambda ()
     (local-set-key (kbd "`1") 'LaTeX-math-partial)
     (local-set-key (kbd "`3") 'LaTeX-math-sqrt)))
#+END_SRC

Insert braces after typing <^> and <_> in math mode.
Autocomplete dollar sign.
#+BEGIN_SRC emacs-lisp
(setq TeX-electric-sub-and-superscript 1)
;; (setq TeX-electric-math (cons "$" "$"))
#+END_SRC

Set custom program to open pdf, dvi and html

#+BEGIN_SRC emacs-lisp
(setq
 ;; Set the list of viewers for Mac OS X.
 TeX-view-program-list
 '(("Preview.app" "open -a Preview.app %o")
   ("Skim" "open -a Skim.app %o")
   ("okular" "okular %o")
   ("displayline" "displayline %n %o %b")
   ("open" "open build/%o")))

(if (eq system-type 'darwin)
 ;; Select the viewers for each file type.
 ;; Depending on system-type
(setq
 TeX-view-program-selection
 '((output-dvi "open")
   (output-pdf "Skim")
   (output-html "open")))
(if (eq system-type 'gnu/linux)
(setq
 TeX-view-program-selection
 '((output-dvi "open")
   (output-pdf "okular")
   (output-html "open"))))
)
#+END_SRC

* Python
  Elpy is an Emacs package to bring powerful Python editing to Emacs. It
  combines and configures a number of other packages, both written in Emacs Lisp
  as well as Python.
    #+BEGIN_SRC emacs-lisp
      (use-package elpy
      :ensure t
      :after python
      ;:mode ("\\.py\\'" . python-mode)
      ;:interpreter ("python" . python-mode)
      :config
      (elpy-enable))
    #+END_SRC

  Set the shell interpreter to python 3 instead of python 2.
  #+BEGIN_SRC emacs-lisp
    (setq python-shell-interpreter "python3")
  #+END_SRC

  Change elpy's RPC to python 3
  #+BEGIN_SRC emacs-lisp
    (setq elpy-rpc-python-command "python3")
  #+END_SRC

  This is used as an workaround for the following issue [[https://github.com/jorgenschaefer/elpy/issues/887]]
#+BEGIN_SRC emacs-lisp
 (setq python-shell-completion-native-enable nil)
#+END_SRC  
* Org mode
  
The following is for syntax highlighting the code source blocks inside org mode.
Furthermore it will load the languages that could be used.

  #+BEGIN_SRC emacs-lisp
    (setq org-confirm-babel-evaluate nil
          org-src-fontify-natively   t
          org-src-tab-acts-natively  t)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((sh         . t)
       (emacs-lisp . t)
       (python     . t)
       (latex      . t)
       (ruby       . t)
       (dot        . t)
       (css        . t)))
  #+END_SRC
  
  Remove the HTML validate link that appears at the postamble of your exported HTML file.

  #+BEGIN_SRC emacs-lisp :tangle no
    (setq org-html-validation-link nil)
  #+END_SRC

* Magit
  Magit is an interface to the version control system Git, implemented as an Emacs package.  
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :defer t
       :bind (("C-x g" . magit-status))
       :config  (require 'evil-magit))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit
       :ensure t
       :defer t)
   #+END_SRC
* Ledger
A major mode for editing files in the format used by the [[https://github.com/ledger/ledger][ledger]] command-line accounting system.

   #+BEGIN_SRC emacs-lisp
     (use-package ledger-mode
       :ensure t
       :defer t)
   #+END_SRC
  
  Set `C-c $` to insert `€` symbol.
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'ledger-mode
       ;(define-key ledger-mode-map (kbd "C-c $") "€")
       (define-key ledger-mode-map (kbd "C-c $") (lambda () (interactive) (insert "€")))
       (define-key ledger-mode-map (kbd "C-c c") 'ledger-mode-clean-buffer))
   #+END_SRC
  
  Set a custom color for the periodic xact face as it was too bright green.
    #+BEGIN_SRC emacs-lisp
    (custom-set-faces
    '(ledger-font-periodic-xact-face ((t (:foreground "#859900" :weight normal)))))
    #+END_SRC
* Markdown
A major mode for editing Markdown-formatted text.

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command
                 (concat
                 "/usr/local/bin/pandoc"
                 " --from=markdown+hard_line_breaks --to=html"
                 " --mathjax --highlight-style=pygments"))
       :config
              (setq markdown-max-image-size (quote (50 . 20))
                    markdown-live-preview-delete-export 'delete-on-export
                    markdown-split-window-direction 'right ))
   #+END_SRC

* Custom Functions
Insert the result of some Emacs Lisp expression at point.
Useful if you want do quick arithmetic.

    #+BEGIN_SRC emacs-lisp
    (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
                (current-buffer))
        (error (message "Invalid expression")
            (insert (current-kill 0)))))

    (global-set-key (kbd "C-c C-e") 'eval-and-replace)
    #+END_SRC
* End notes

   Before you can build this on a new system, make sure that you put
   the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    header-args:emacs-lisp  :tangle yes